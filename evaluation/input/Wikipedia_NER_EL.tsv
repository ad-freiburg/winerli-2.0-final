	Konrad_Zuse	
Konrad	Konrad_Zuse	person
Zuse	Konrad_Zuse	person
was		
a		
German		
civil	Civil_engineer	misc
engineer	Civil_engineer	misc
,		
inventor	Inventor	misc
and		
computer		
pioneer		
.		
His		
greatest		
achievement		
was		
the		
world		
's		
first		
programmable		
computer	Computer	misc
;		
the		
functional		
program		
-		
controlled		
Turing	Turing_completeness	misc
-	Turing_completeness	misc
complete	Turing_completeness	misc
Z3	Z3_(computer)	misc
became		
operational		
in		
May		
1941		
.		
Thanks		
to		
this		
machine		
and		
its		
predecessors		
,		
Zuse	Konrad_Zuse	person
has		
often		
been		
regarded		
as		
the		
inventor	Inventor	misc
of		
the		
modern		
computer	Computer	misc
.		
Zuse	Konrad_Zuse	person
was		
also		
noted		
for		
the		
S2		
computing	Computer	misc
machine	Computer	misc
,		
considered		
the		
first		
process	Process_control	misc
control	Process_control	misc
computer	Computer	misc
.		
He	Konrad_Zuse	person
founded		
one		
of		
the		
earliest		
computer	Computer_industry	misc
businesses	Computer_industry	misc
in		
1941		
,		
producing		
the		
Z4	Z4_(computer)	misc
,		
which		
became		
the		
world		
's		
first		
commercial		
computer	Computer	misc
.		
From		
1943		
to		
1945		
he	Konrad_Zuse	
designed		
the		
first		
high	High-level_programming_language	misc
-	High-level_programming_language	misc
level	High-level_programming_language	misc
programming	High-level_programming_language	misc
language	High-level_programming_language	misc
,		
Plankalkül	Plankalkül	misc
.		
In		
1969		
,		
Zuse	Konrad_Zuse	person
suggested		
the		
concept	Concept	misc
of		
a		
computation		
-		
based		
universe	Universe	misc
in		
his		
book	Book	misc
Rechnender	Calculating_Space	misc
Raum	Calculating_Space	misc
(		
Calculating	Calculating_Space	misc
Space	Calculating_Space	misc
)		
.		
Much		
of		
his	Konrad_Zuse	person
early		
work		
was		
financed		
by		
his	Konrad_Zuse	person
family	Family	misc
and		
commerce	Commerce	misc
,		
but		
after		
1939		
he	Konrad_Zuse	person
was		
given		
resources	Resource	misc
by		
the		
Nazi	Nazi_Germany	organization
German	Nazi_Germany	organization
government	Nazi_Germany	organization
.		
Due		
to		
World	World_War_II	misc
War	World_War_II	misc
II	World_War_II	misc
,		
Zuse	Konrad_Zuse	person
's	Konrad_Zuse	person
work		
went		
largely		
unnoticed		
in		
the		
United	United_Kingdom	organization
Kingdom	United_Kingdom	organization
and		
the		
United	United_States	organization
States	United_States	organization
.		
Possibly		
his		
first		
documented		
influence		
on		
a		
US	United_States	organization
company	Company	organization
was		
IBM	IBM	organization
's	IBM	organization
option		
on		
his	Konrad_Zuse	person
patents	Patent	misc
in		
1946		
.		
There		
is		
a		
replica	Replica	misc
of		
the		
Z3	Z3_(computer)	misc
,		
as		
well		
as		
the		
original		
Z4	Z4_(computer)	misc
,		
in		
the		
Deutsches	Deutsches_Museum	organization
Museum	Deutsches_Museum	organization
in		
Munich	Munich	location
.		
The		
Deutsches	German_Museum_of_Technology	organization
Technikmuseum	German_Museum_of_Technology	organization
in		
Berlin	Berlin	location
has		
an		
exhibition	Exhibition	misc
devoted		
to		
Zuse	Konrad_Zuse	person
,		
displaying		
twelve		
of		
his		
machines		
,		
including		
a		
replica	Replica	misc
of		
the		
Z1	Z1_(computer)	misc
and		
several		
of		
Zuse	Konrad_zuse	person
's	Konrad_zuse	person
paintings	Painting	misc
.		
	Caesar_cipher	
In		
cryptography	Cryptography	misc
,		
a		
Caesar	Caesar_cipher	misc
cipher	Caesar_cipher	misc
,		
also		
known		
as		
Caesar	Caesar_cipher	misc
's	Caesar_cipher	misc
cipher	Caesar_cipher	misc
,		
the		
shift	Caesar_cipher	misc
cipher	Caesar_cipher	misc
,		
Caesar	Caesar_cipher	misc
's	Caesar_cipher	misc
code	Caesar_cipher	misc
or		
Caesar	Caesar_cipher	misc
shift	Caesar_cipher	misc
,		
is		
one		
of		
the		
simplest		
and		
most		
widely		
known		
encryption	Encryption	misc
techniques		
.		
It	Caesar_cipher	misc
is		
a		
type		
of		
substitution	Substitution_cipher	misc
cipher	Substitution_cipher	misc
in		
which		
each		
letter	Letter_(alphabet)	misc
in		
the		
plaintext	Plaintext	misc
is		
replaced		
by		
a		
letter	Letter_(alphabet)	misc
some		
fixed		
number		
of		
positions		
down		
the		
alphabet	Alphabet	misc
.		
For		
example		
,		
with		
a		
left		
shift		
of		
3		
,		
D	D	misc
would		
be		
replaced		
by		
A	A	misc
,		
E	E	misc
would		
become		
B	B	misc
,		
and		
so		
on		
.		
The	Caesar_cipher	misc
method	Caesar_cipher	misc
is		
named		
after		
Julius	Julius_Caesar	person
Caesar	Julius_Caesar	person
,		
who		
used		
it	Caesar_cipher	misc
in		
his		
private		
correspondence		
.		
The		
encryption	Encryption	misc
step		
personformed		
by		
a		
Caesar	Caesar_cipher	misc
cipher	Caesar_cipher	misc
is		
often		
incorporated		
as		
part		
of		
more		
complex		
schemes		
,		
such		
as		
the		
Vigenère	Vigenère_cipher	misc
cipher	Vigenère_cipher	misc
,		
and		
still		
has		
modern		
application		
in		
the		
ROT13	ROT13	misc
system		
.		
As		
with		
all		
single		
-		
alphabet		
substitution	Substitution_cipher	misc
ciphers	Substitution_cipher	misc
,		
the		
Caesar	Caesar_cipher	misc
cipher	Caesar_cipher	misc
is		
easily		
broken		
and		
in		
modern		
practice		
offers		
essentially		
no		
communication	Communications_security	misc
security	Communications_security	misc
.		
	Binary_search_algorithm	misc
In		
computer	Computer_science	misc
science	Computer_science	misc
,		
binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
,		
also		
known		
as		
half	Binary_search_algorithm	misc
-	Binary_search_algorithm	misc
interval	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
,		
logarithmic	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
,		
or		
binary	Binary_search_algorithm	misc
chop	Binary_search_algorithm	misc
,		
is		
a		
search	Search_algorithm	misc
algorithm	Search_algorithm	misc
that		
finds		
the		
position		
of		
a		
target		
value		
within		
a		
sorted	Sorted_array	misc
array	Sorted_array	misc
.		
Binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
compares		
the		
target		
value		
to		
the		
middle		
element		
of		
the		
array	Array_data_structure	misc
.		
If		
they		
are		
not		
equal		
,		
the		
half		
in		
which		
the		
target		
can		
not		
lie		
is		
eliminated		
and		
the		
search		
continues		
on		
the		
remaining		
half		
,		
again		
taking		
the		
middle		
element		
to		
compare		
to		
the		
target		
value		
,		
and		
repeating		
this		
until		
the		
target		
value		
is		
found		
.		
If		
the		
search		
ends		
with		
the		
remaining		
half		
being		
empty		
,		
the		
target		
is		
not		
in		
the		
array	Array_data_structure	misc
.		
Even		
though		
the		
idea		
is		
simple		
,		
implementing		
binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
correctly		
requires		
attention		
to		
some		
subtleties		
about		
its		
exit		
conditions		
and		
midpoint		
calculation		
.		
Binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
runs		
in		
logarithmic	Time_complexity	misc
time	Time_complexity	misc
in		
the		
worst	Best,_worst_and_average_case	misc
case	Best,_worst_and_average_case	misc
,		
making		
O(log	Big_O_notation	misc
n	Big_O_notation	misc
)	Big_O_notation	misc
comparisons		
,		
where		
n		
is		
the		
number		
of		
elements		
in		
the		
array	Array_data_structure	misc
,		
the		
O	Big_O_notation	misc
is		
Big	Big_O_notation	misc
O	Big_O_notation	misc
notation	Big_O_notation	misc
,		
and		
log	Logarithm	misc
is		
the		
logarithm	Logarithm	misc
.		
Binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
takes		
constant		
(		
O(1	Big_O_notation	misc
)	Big_O_notation	misc
)		
space		
,		
meaning		
that		
the		
space		
taken		
by		
the	Binary_search_algorithm	misc
algorithm	Binary_search_algorithm	misc
is		
the		
same		
for		
any		
number		
of		
elements		
in		
the		
array	Array_data_structure	misc
.		
Binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
is		
faster		
than		
linear	Linear_search	misc
search	Linear_search	misc
except		
for		
small		
arrays	Array_data_structure	misc
,		
but		
the		
array	Array_data_structure	misc
must		
be		
sorted		
first		
.		
Although		
specialized		
data	Data_structure	misc
structures	Data_structure	misc
designed		
for		
fast		
searching		
,		
such		
as		
hash	Hash_table	misc
tables	Hash_table	misc
,		
can		
be		
searched		
more		
efficiently		
,		
binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
applies		
to		
a		
wider		
range		
of		
problems		
.		
There		
are		
numerous		
variations		
of		
binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
.		
In		
particular		
,		
fractional	Fractional_cascading	misc
cascading	Fractional_cascading	misc
speeds		
up		
binary	Binary_search_algorithm	misc
searches	Binary_search_algorithm	misc
for		
the		
same		
value		
in		
multiple		
arrays	Array_data_structure	misc
.		
Fractional	Fractional_cascading	misc
cascading	Fractional_cascading	misc
efficiently		
solves		
a		
number		
of		
search	Search_problem	misc
problems	Search_problem	misc
in		
computational	Computational_geometry	misc
geometry	Computational_geometry	misc
and		
in		
numerous		
other		
fields		
.		
Exponential	Exponential_search	misc
search	Exponential_search	misc
extends		
binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
to		
unbounded		
lists		
.		
The		
binary	Binary_search_tree	misc
search	Binary_search_tree	misc
tree	Binary_search_tree	misc
and		
B	B-tree	misc
-	B-tree	misc
tree	B-tree	misc
data	Data_structure	misc
structures	Data_structure	misc
are		
based		
on		
binary	Binary_search_algorithm	misc
search	Binary_search_algorithm	misc
.		